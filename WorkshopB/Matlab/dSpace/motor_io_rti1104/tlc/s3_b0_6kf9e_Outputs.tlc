%implements s3_b0_6kf9e_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
ZCEventType zcEvent;
real_T u0;
real_T u1;
real_T u2;
%closefile localVarDecl
%assign _modelSS = ""

%assign tlcOutputsFcnOfS2B2 = OpaqueTLCBlockFcn("Outputs", 2, 2, 1, 2)
%assign tlcOutputsFcnOfS2B5 = OpaqueTLCBlockFcn("Outputs", 2, 5, 1, 2)
%assign tlcOutputsFcnOfS2B6 = OpaqueTLCBlockFcn("Outputs", 2, 6, 1, 2)
%assign tlcOutputsFcnOfS2B7 = OpaqueTLCBlockFcn("Outputs", 2, 7, 1, 2)
%assign tlcOutputsFcnOfS2B8 = OpaqueTLCBlockFcn("Outputs", 2, 8, 1, 2)
%assign tlcOutputsFcnOfS2B10 = OpaqueTLCBlockFcn("Outputs", 2, 10, 1, 2)
%assign tlcOutputsFcnOfS2B16 = OpaqueTLCBlockFcn("Outputs", 2, 16, 1, 2)
%assign tlcOutputsFcnOfS2B17 = OpaqueTLCBlockFcn("Outputs", 2, 17, 1, 2)
%assign tlcOutputsFcnOfS1B0 = OpaqueTLCBlockFcn("Outputs", 1, 0, 1, 2)
%assign tlcOutputsFcnOfS2B20 = OpaqueTLCBlockFcn("Outputs", 2, 20, 1, 2)
%assign tlcOutputsFcnOfS2B21 = OpaqueTLCBlockFcn("Outputs", 2, 21, 1, 2)
%<SLibCGIRDumpSystemUserCode(2, "Output", "Header")>\
%<SLibCGIRDumpSystemUserCode(2, "Output", "Body")>\
if (%<(SLibCGIRIsSampleHit(1, 2))>) {
%<tlcOutputsFcnOfS2B2>\
    /* Gain: '<S6>/fi1_scaling' */
    motor_io_B.fi1_scaling = motor_io_P.fi1_scaling_Gain * motor_io_B.SFunction1;
%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[0], "Output",0)
    /* MATLAB Function: '<Root>/Traject_and_Model_function 1' incorporates:
 *  Constant: '<Root>/RS'
 *  Constant: '<Root>/Reset enc'
 */
%if SLibCG_SystemFcnArgAccessed("mot_Traject_and_Model_function1",0,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("mot_Traject_and_Model_function1", ["%<_modelSS>", "motor_io_P.Resetenc_Value", "motor_io_P.RS_Value", "motor_io_B.fi1_scaling", "&motor_io_B.sf_Traject_and_Model_function1", "&motor_io_DW.sf_Traject_and_Model_function1"], 0, 0, 3, 0, 3, 2)>\

%endif
    /* Gain: '<Root>/Gain' */
    motor_io_B.Gain = motor_io_P.Gain_Gain * motor_io_B.sf_Traject_and_Model_function1.volt;
    /* Saturate: '<S2>/Saturation' */
    u0 = motor_io_B.Gain;
    u1 = motor_io_P.Saturation_LowerSat;
    u2 = motor_io_P.Saturation_UpperSat;
    if (u0 > u2) {
        motor_io_B.Volt = u2;
    } else if (u0 < u1) {
        motor_io_B.Volt = u1;
    } else {
        motor_io_B.Volt = u0;
    }
    /* End of Saturate: '<S2>/Saturation' */

    /* Gain: '<S2>/pwm_skalning' */
    motor_io_B.pwm_skalning = motor_io_P.pwm_skalning_Gain * motor_io_B.Volt;
    /* Sum: '<S2>/Sum' incorporates:
 *  Constant: '<S2>/pwm_offstet'
 */
    motor_io_B.Sum = motor_io_B.pwm_skalning + motor_io_P.pwm_offstet_Value;
%<tlcOutputsFcnOfS2B5>\
%<tlcOutputsFcnOfS2B6>\
%<tlcOutputsFcnOfS2B7>\
%<tlcOutputsFcnOfS2B8>\
    /* DataTypeConversion: '<S2>/Data Type Conversion' incorporates:
 *  Constant: '<S2>/Enable[1_Off, 0_On]'
 */
    motor_io_B.DataTypeConversion = (motor_io_P.Enable1_Off0_On_Value != 0.0);
%<tlcOutputsFcnOfS2B10>\
}
/* Integrator: '<S1>/Integrator1' */
motor_io_B.Integrator1 = motor_io_X.Integrator1_CSTATE;
if (%<(SLibCGIRIsSampleHit(1, 2))>) {
%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[0], "Output",0)
    /* MATLAB Function: '<Root>/Traject_and_Model_function 3' incorporates:
 *  Constant: '<Root>/RS'
 *  Constant: '<Root>/Reset enc'
 */
%if SLibCG_SystemFcnArgAccessed("mot_Traject_and_Model_function1",0,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("mot_Traject_and_Model_function1", ["%<_modelSS>", "motor_io_P.Resetenc_Value", "motor_io_P.RS_Value", "motor_io_B.Integrator1", "&motor_io_B.sf_Traject_and_Model_function3", "&motor_io_DW.sf_Traject_and_Model_function3"], 0, 1, 3, 0, 3, 2)>\
%endif
}
/* Integrator: '<S1>/Integrator' */
motor_io_B.Integrator = motor_io_X.Integrator_CSTATE;
/* Gain: '<S1>/Gain1' */
motor_io_B.Gain1 = motor_io_P.Gain1_Gain * motor_io_B.Integrator;
/* Sum: '<S1>/Add' */
motor_io_B.Add = motor_io_B.sf_Traject_and_Model_function3.volt - motor_io_B.Gain1;
/* Gain: '<S1>/k//R ' */
motor_io_B.kR = motor_io_P.kR_Gain * motor_io_B.Add;
/* Saturate: '<S7>/Saturate to Fc' */
u0 = motor_io_B.kR;
u1 = motor_io_P.SaturatetoFc_LowerSat;
u2 = motor_io_P.F_c_upper;
if (u0 > u2) {
    motor_io_B.Stickslipregion = u2;
} else if (u0 < u1) {
    motor_io_B.Stickslipregion = u1;
} else {
    motor_io_B.Stickslipregion = u0;
}
/* End of Saturate: '<S7>/Saturate to Fc' */

/* Abs: '<S7>/Abs' */
motor_io_B.Abs = fabs(motor_io_B.Integrator);
/* RelationalOperator: '<S8>/Compare' incorporates:
 *  Constant: '<S8>/Constant'
 */
motor_io_B.Compare = (motor_io_B.Abs <= motor_io_P.Constant_Value);
/* Gain: '<S7>/Vicous friction' */
motor_io_B.Vicousfriction = motor_io_P.Vicousfriction_Gain * motor_io_B.Integrator;
/* Signum: '<S7>/Sign' */
u0 = motor_io_B.Integrator;
if (u0 < 0.0) {
    motor_io_B.Sign = -1.0;
} else if (u0 > 0.0) {
    motor_io_B.Sign = 1.0;
} else if (u0 == 0.0) {
    motor_io_B.Sign = 0.0;
} else {
    motor_io_B.Sign = u0;
}
/* End of Signum: '<S7>/Sign' */

/* Product: '<S7>/Product' incorporates:
 *  Constant: '<S7>/F_c'
 */
motor_io_B.Product = motor_io_P.F_c * motor_io_B.Sign;
/* Sum: '<S7>/Add' */
motor_io_B.Viscousregion = motor_io_B.Vicousfriction + motor_io_B.Product;
/* Switch: '<S7>/Switch' */
if (motor_io_B.Compare) {
    motor_io_B.Friction = motor_io_B.Stickslipregion;
} else {
    motor_io_B.Friction = motor_io_B.Viscousregion;
}
/* End of Switch: '<S7>/Switch' */

/* Sum: '<S1>/Add1' */
motor_io_B.Add1 = motor_io_B.kR - motor_io_B.Friction;
if (%<(SLibCGIRIsSampleHit(1, 2))>) {
    /* Gain: '<S1>/Gain2' incorporates:
 *  Constant: '<S1>/Load inertia'
 */
    motor_io_B.Gain2 = motor_io_P.Gain2_Gain * motor_io_P.J1;
    /* Sum: '<S1>/Add2' incorporates:
 *  Constant: '<S1>/Motor inertia'
 */
    motor_io_B.Add2 = motor_io_B.Gain2 + motor_io_P.Motorinertia_Value;
}
/* Product: '<S1>/Inertias 1//J' */
motor_io_B.Inertias1J = 1.0 / motor_io_B.Add2 * motor_io_B.Add1;
if (%<(SLibCGIRIsSampleHit(1, 2))>) {
%<tlcOutputsFcnOfS2B16>\
%<tlcOutputsFcnOfS2B17>\
    /* Gain: '<S6>/w1_scaling' */
    motor_io_B.w1_scaling = motor_io_P.w1_scaling_Gain * motor_io_B.SFunction2;
    /* Outputs for Triggered SubSystem: '<S6>/DS1104ENC_SET_POS_C1' incorporates:
 *  TriggerPort: '<S16>/Trigger'
 */
    if (%<(LibIsMajorTimeStep())>) {
        /* Constant: '<S6>/Reset enc' */
        zcEvent = %<(SLibCG_SE(SLibCGIRZCFcn("RISING_ZERO_CROSSING", "motor_io_PrevZCX.DS1104ENC_SET_POS_C1_Trig_ZCE", "motor_io_P.Resetenc_Value_k", 0)))>;
        if (zcEvent != NO_ZCEVENT) {
%<SLibCGIRDumpSystemUserCode(1, "Output", "Header")>\
%<SLibCGIRDumpSystemUserCode(1, "Output", "Body")>\
%<tlcOutputsFcnOfS1B0>\
%<SLibCGIRDumpSystemUserCode(1, "Output", "Trailer")>\
%<SLibCGIRDumpSystemUserCode(1, "Update", "Header")>\
%<SLibCGIRDumpSystemUserCode(1, "Update", "Body")>\
%<SLibCGIRDumpSystemUserCode(1, "Update", "Trailer")>\
        }
    }
    /* End of Outputs for SubSystem: '<S6>/DS1104ENC_SET_POS_C1' */
%<tlcOutputsFcnOfS2B20>\
%<tlcOutputsFcnOfS2B21>\
}
/* SignalGenerator: '<Root>/SinGenerator' */
motor_io_B.SinGenerator = sin(motor_io_P.SinGenerator_Frequency * %<(SLibCG_SE(LibGetT()))>) * motor_io_P.SinGenerator_Amplitude;
/* SignalGenerator: '<Root>/SquareGenerator' */
u0 = motor_io_P.SquareGenerator_Frequency * %<(SLibCG_SE(LibGetT()))>;
if (u0 - floor(u0) >= 0.5) {
    motor_io_B.SquareGenerator = motor_io_P.SquareGenerator_Amplitude;
} else {
    motor_io_B.SquareGenerator = -motor_io_P.SquareGenerator_Amplitude;
}
/* End of SignalGenerator: '<Root>/SquareGenerator' */

/* Switch: '<Root>/Switch' incorporates:
 *  Constant: '<Root>/SignalSelector[0Square,1Sine]'
 */
if (motor_io_P.SignalSelector0Square1Sine_Valu != 0.0) {
    motor_io_B.Switch = motor_io_B.SinGenerator;
} else {
    motor_io_B.Switch = motor_io_B.SquareGenerator;
}
/* End of Switch: '<Root>/Switch' */
%<SLibCGIRDumpSystemUserCode(2, "Output", "Trailer")>\
%<SLibInsertSolverResetCode()>\
%closefile cfgTxt
%<cfgTxt>
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(1, 2, fcnProtoType)>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
