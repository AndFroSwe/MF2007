%implements s1_b0_h9qnd_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
real_T temp;
ZCEventType zcEvent;
real_T u1;
real_T u2;
%closefile localVarDecl
%assign tlcOutputsFcnOfS1B3 = OpaqueTLCBlockFcn("Outputs", 1, 3, 0, 3)
%assign tlcOutputsFcnOfS1B5 = OpaqueTLCBlockFcn("Outputs", 1, 5, 0, 3)
%assign tlcOutputsFcnOfS1B6 = OpaqueTLCBlockFcn("Outputs", 1, 6, 0, 3)
%assign tlcOutputsFcnOfS1B7 = OpaqueTLCBlockFcn("Outputs", 1, 7, 0, 3)
%assign tlcOutputsFcnOfS1B8 = OpaqueTLCBlockFcn("Outputs", 1, 8, 0, 3)
%assign tlcOutputsFcnOfS1B10 = OpaqueTLCBlockFcn("Outputs", 1, 10, 0, 3)
%assign tlcOutputsFcnOfS1B11 = OpaqueTLCBlockFcn("Outputs", 1, 11, 0, 3)
%assign tlcOutputsFcnOfS1B16 = OpaqueTLCBlockFcn("Outputs", 1, 16, 0, 3)
%assign tlcOutputsFcnOfS1B17 = OpaqueTLCBlockFcn("Outputs", 1, 17, 0, 3)
%assign tlcOutputsFcnOfS0B0 = OpaqueTLCBlockFcn("Outputs", 0, 0, 0, 3)
%assign tlcOutputsFcnOfS1B20 = OpaqueTLCBlockFcn("Outputs", 1, 20, 0, 3)
%assign tlcOutputsFcnOfS1B21 = OpaqueTLCBlockFcn("Outputs", 1, 21, 0, 3)
%<SLibCG_TrackEO(1)>\
%<SLibCG_TrackEO(0)>\
%<SLibCGIRDumpSystemUserCode(1, "Output", "Header")>\
%<SLibCGIRDumpSystemUserCode(1, "Output", "Body")>\
/* Integrator: '<S1>/Integrator' */
motor_io_B.Integrator = motor_io_X.Integrator_CSTATE;
/* Outport: '<Root>/Vel1' */
motor_io_Y.Vel1 = motor_io_B.Integrator;
/* Integrator: '<S1>/Integrator1' */
motor_io_B.Integrator1 = motor_io_X.Integrator1_CSTATE;
/* Outport: '<Root>/Pos1' */
motor_io_Y.Pos1 = motor_io_B.Integrator1;
/* SignalGenerator: '<Root>/SinGenerator' */
motor_io_B.SinGenerator = sin(motor_io_P.SinGenerator_Frequency * %<(SLibCG_SE(LibGetT()))>) * motor_io_P.SinGenerator_Amplitude;
/* SignalGenerator: '<Root>/SquareGenerator' */
temp = motor_io_P.SquareGenerator_Frequency * %<(SLibCG_SE(LibGetT()))>;
if (temp - floor(temp) >= 0.5) {
    motor_io_B.SquareGenerator = motor_io_P.SquareGenerator_Amplitude;
} else {
    motor_io_B.SquareGenerator = -motor_io_P.SquareGenerator_Amplitude;
}
/* End of SignalGenerator: '<Root>/SquareGenerator' */

/* Switch: '<Root>/Switch' incorporates:
 *  Constant: '<Root>/SignalSelector[0Square,1Sine]'
 */
if (motor_io_P.SignalSelector0Square1Sine_Valu != 0.0) {
    motor_io_B.ref = motor_io_B.SinGenerator;
} else {
    motor_io_B.ref = motor_io_B.SquareGenerator;
}
/* End of Switch: '<Root>/Switch' */
if (%<(SLibCGIRIsSampleHit(1, 1))>) {
%<tlcOutputsFcnOfS1B3>\
    /* Gain: '<S6>/fi1_scaling' */
    motor_io_B.fi1_scaling = motor_io_P.fi1_scaling_Gain * motor_io_B.SFunction1;
    /* Quantizer: '<Root>/Quantizer1' */
    temp = motor_io_B.fi1_scaling;
    motor_io_B.Quantizer1 = %<(SLibCGCallSubFcn("rt_roundd_snf", ["temp / motor_io_P.Ts"], 0, 3, 0))> * motor_io_P.Ts;
}
/* Sum: '<Root>/Sum2' */
motor_io_B.Sum2 = motor_io_B.ref - motor_io_B.Quantizer1;
if (%<(SLibCGIRIsSampleHit(1, 1))>) {
    /* Gain: '<S3>/Proportional Gain' */
    motor_io_B.ProportionalGain = motor_io_P.ProportionalGain_Gain * motor_io_B.Sum2;
    /* DiscreteIntegrator: '<S3>/Integrator' */
    motor_io_B.Integrator_m = motor_io_DW.Integrator_DSTATE;
    /* Gain: '<S3>/Derivative Gain' */
    motor_io_B.DerivativeGain = motor_io_P.DerivativeGain_Gain * motor_io_B.Sum2;
    /* DiscreteIntegrator: '<S3>/Filter' */
    motor_io_B.Filter = motor_io_DW.Filter_DSTATE;
    /* Sum: '<S3>/SumD' */
    motor_io_B.SumD = motor_io_B.DerivativeGain - motor_io_B.Filter;
    /* Gain: '<S3>/Filter Coefficient' */
    motor_io_B.FilterCoefficient = motor_io_P.FilterCoefficient_Gain * motor_io_B.SumD;
    /* Sum: '<S3>/Sum' */
    motor_io_B.Sum = (motor_io_B.ProportionalGain + motor_io_B.Integrator_m) + motor_io_B.FilterCoefficient;
    /* ZeroOrderHold: '<Root>/Zero-Order Hold1' */
    motor_io_B.ZeroOrderHold1 = motor_io_B.Sum;
    /* Gain: '<Root>/Gain' */
    motor_io_B.Gain = motor_io_P.Gain_Gain * motor_io_B.ZeroOrderHold1;
    /* Saturate: '<S4>/Saturation' */
    temp = motor_io_B.Gain;
    u1 = motor_io_P.Saturation_LowerSat;
    u2 = motor_io_P.Saturation_UpperSat;
    if (temp > u2) {
        motor_io_B.Volt = u2;
    } else if (temp < u1) {
        motor_io_B.Volt = u1;
    } else {
        motor_io_B.Volt = temp;
    }
    /* End of Saturate: '<S4>/Saturation' */

    /* Gain: '<S4>/pwm_skalning' */
    motor_io_B.pwm_skalning = motor_io_P.pwm_skalning_Gain * motor_io_B.Volt;
    /* Sum: '<S4>/Sum' incorporates:
 *  Constant: '<S4>/pwm_offstet'
 */
    motor_io_B.Sum_f = motor_io_B.pwm_skalning + motor_io_P.pwm_offstet_Value;
%<tlcOutputsFcnOfS1B5>\
%<tlcOutputsFcnOfS1B6>\
%<tlcOutputsFcnOfS1B7>\
%<tlcOutputsFcnOfS1B8>\
    /* DataTypeConversion: '<S4>/Data Type Conversion' incorporates:
 *  Constant: '<S4>/Enable[1_Off, 0_On]'
 */
    motor_io_B.DataTypeConversion = (motor_io_P.Enable1_Off0_On_Value != 0.0);
%<tlcOutputsFcnOfS1B10>\
%<tlcOutputsFcnOfS1B11>\
}
/* Quantizer: '<Root>/Quantizer' */
temp = motor_io_B.Integrator1;
motor_io_B.Quantizer = %<(SLibCGCallSubFcn("rt_roundd_snf", ["temp / motor_io_P.Ts"], 0, 3, 1))> * motor_io_P.Ts;
/* Sum: '<Root>/Sum1' */
motor_io_B.Sum1 = motor_io_B.ref - motor_io_B.Quantizer;
if (%<(SLibCGIRIsSampleHit(1, 1))>) {
    /* Gain: '<S2>/Proportional Gain' */
    motor_io_B.ProportionalGain_k = motor_io_P.ProportionalGain_Gain_l * motor_io_B.Sum1;
    /* DiscreteIntegrator: '<S2>/Integrator' */
    motor_io_B.Integrator_b = motor_io_DW.Integrator_DSTATE_g;
    /* Gain: '<S2>/Derivative Gain' */
    motor_io_B.DerivativeGain_o = motor_io_P.DerivativeGain_Gain_l * motor_io_B.Sum1;
    /* DiscreteIntegrator: '<S2>/Filter' */
    motor_io_B.Filter_e = motor_io_DW.Filter_DSTATE_a;
    /* Sum: '<S2>/SumD' */
    motor_io_B.SumD_g = motor_io_B.DerivativeGain_o - motor_io_B.Filter_e;
    /* Gain: '<S2>/Filter Coefficient' */
    motor_io_B.FilterCoefficient_g = motor_io_P.FilterCoefficient_Gain_p * motor_io_B.SumD_g;
    /* Sum: '<S2>/Sum' */
    motor_io_B.Sum_h = (motor_io_B.ProportionalGain_k + motor_io_B.Integrator_b) + motor_io_B.FilterCoefficient_g;
    /* ZeroOrderHold: '<Root>/Zero-Order Hold' */
    motor_io_B.ZeroOrderHold = motor_io_B.Sum_h;
    /* Saturate: '<S1>/Saturation' */
    temp = motor_io_B.ZeroOrderHold;
    u1 = motor_io_P.Saturation_LowerSat_b;
    u2 = motor_io_P.Saturation_UpperSat_f;
    if (temp > u2) {
        motor_io_B.Saturation = u2;
    } else if (temp < u1) {
        motor_io_B.Saturation = u1;
    } else {
        motor_io_B.Saturation = temp;
    }
    /* End of Saturate: '<S1>/Saturation' */
}
/* Gain: '<S1>/Gain1' */
motor_io_B.Gain1 = motor_io_P.Gain1_Gain * motor_io_B.Integrator;
/* Sum: '<S1>/Add' */
motor_io_B.Add = motor_io_B.Saturation - motor_io_B.Gain1;
/* Gain: '<S1>/k//R ' */
motor_io_B.kR = motor_io_P.kR_Gain * motor_io_B.Add;
/* Switch: '<S7>/Switch1' incorporates:
 *  Constant: '<S7>/Constant'
 *  Constant: '<S7>/Constant1'
 */
if (motor_io_B.Integrator > motor_io_P.Switch1_Threshold) {
    motor_io_B.Switch1 = motor_io_P.F_c;
} else {
    motor_io_B.Switch1 = motor_io_P.Constant1_Value;
}
/* End of Switch: '<S7>/Switch1' */

/* Saturate: '<S7>/Saturate to Fc' */
temp = motor_io_B.Switch1;
u1 = motor_io_P.SaturatetoFc_LowerSat;
u2 = motor_io_P.F_c;
if (temp > u2) {
    motor_io_B.Stickslipregion = u2;
} else if (temp < u1) {
    motor_io_B.Stickslipregion = u1;
} else {
    motor_io_B.Stickslipregion = temp;
}
/* End of Saturate: '<S7>/Saturate to Fc' */

/* Abs: '<S7>/Abs' */
motor_io_B.Abs = fabs(motor_io_B.Integrator);
/* RelationalOperator: '<S8>/Compare' incorporates:
 *  Constant: '<S8>/Constant'
 */
motor_io_B.Compare = (motor_io_B.Abs <= motor_io_P.Constant_Value);
/* Gain: '<S7>/Vicous friction' */
motor_io_B.Vicousfriction = motor_io_P.Vicousfriction_Gain * motor_io_B.Integrator;
/* Signum: '<S7>/Sign' */
temp = motor_io_B.Integrator;
if (temp < 0.0) {
    motor_io_B.Sign = -1.0;
} else if (temp > 0.0) {
    motor_io_B.Sign = 1.0;
} else if (temp == 0.0) {
    motor_io_B.Sign = 0.0;
} else {
    motor_io_B.Sign = temp;
}
/* End of Signum: '<S7>/Sign' */

/* Product: '<S7>/Product' incorporates:
 *  Constant: '<S7>/Couloumb friction'
 */
motor_io_B.Product = motor_io_P.F_c * motor_io_B.Sign;
/* Sum: '<S7>/Add' */
motor_io_B.Viscousregion = motor_io_B.Vicousfriction + motor_io_B.Product;
/* Switch: '<S7>/Switch' */
if (motor_io_B.Compare) {
    motor_io_B.Friction = motor_io_B.Stickslipregion;
} else {
    motor_io_B.Friction = motor_io_B.Viscousregion;
}
/* End of Switch: '<S7>/Switch' */

/* Sum: '<S1>/Add1' */
motor_io_B.Add1 = motor_io_B.kR - motor_io_B.Friction;
/* Gain: '<S1>/1//J' */
motor_io_B.J = motor_io_P.J_Gain * motor_io_B.Add1;
if (%<(SLibCGIRIsSampleHit(1, 1))>) {
%<tlcOutputsFcnOfS1B16>\
    /* Gain: '<S2>/Integral Gain' */
    motor_io_B.IntegralGain = motor_io_P.IntegralGain_Gain * motor_io_B.Sum1;
    /* Gain: '<S3>/Integral Gain' */
    motor_io_B.IntegralGain_j = motor_io_P.IntegralGain_Gain_e * motor_io_B.Sum2;
%<tlcOutputsFcnOfS1B17>\
    /* Gain: '<S6>/w1_scaling' */
    motor_io_B.w1_scaling = motor_io_P.w1_scaling_Gain * motor_io_B.SFunction2;
    /* Outputs for Triggered SubSystem: '<S6>/DS1104ENC_SET_POS_C1' incorporates:
 *  TriggerPort: '<S16>/Trigger'
 */
    if (%<(LibIsMajorTimeStep())>) {
        /* Constant: '<S6>/Reset enc' */
        zcEvent = %<(SLibCG_SE(SLibCGIRZCFcn("RISING_ZERO_CROSSING", "motor_io_PrevZCX.DS1104ENC_SET_POS_C1_Trig_ZCE", "motor_io_P.Resetenc_Value", 0)))>;
        if (zcEvent != NO_ZCEVENT) {
%<SLibCGIRDumpSystemUserCode(0, "Output", "Header")>\
%<SLibCGIRDumpSystemUserCode(0, "Output", "Body")>\
%<tlcOutputsFcnOfS0B0>\
%<SLibCGIRDumpSystemUserCode(0, "Output", "Trailer")>\
%<SLibCGIRDumpSystemUserCode(0, "Update", "Header")>\
%<SLibCGIRDumpSystemUserCode(0, "Update", "Body")>\
%<SLibCGIRDumpSystemUserCode(0, "Update", "Trailer")>\
        }
    }
    /* End of Outputs for SubSystem: '<S6>/DS1104ENC_SET_POS_C1' */
%<tlcOutputsFcnOfS1B20>\
%<tlcOutputsFcnOfS1B21>\
}
%<SLibCGIRDumpSystemUserCode(1, "Output", "Trailer")>\
%<SLibInsertSolverResetCode()>\
%closefile cfgTxt
%<cfgTxt>
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 3, fcnProtoType)>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
